service: upload-ocra-files
frameworkVersion: '3'

custom:
  tokenAuthorizer:
    type: token
    name: tokenAuthorizerLambda
    identitySource: method.request.header.Authorization

  s3:
    host: localhost
    directory: /tmp

provider:
  name: aws
  region: ${self:provider.environment.REGION}
  runtime: nodejs16.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, "dev"}
  environment: ${file(./config/${opt:stage, 'dev'}.yaml)}
  logs:
    restApi: true
  apiGateway:
    binaryMediaTypes:
      - 'multipart/form-data'
      # - '*/*'

functions:
  upload: ${file('./resources/functions/Upload.yaml')}
  tokenAuthorizerLambda: ${file('./resources/functions/TokenAuthorizerLambda.yaml')}

package:
  individually: true
  patterns:
    - '!infra/**'
    - '!functions/**'
    - '!config/**'
    - '!resources/**'
    - '!src/**'

plugins:
  - serverless-iam-roles-per-function
  - serverless-s3-local
  - serverless-offline
  - serverless-plugin-typescript

resources:
  Resources:
    GatewayResponseDefault2XX: ${file(./resources/infra/api-gateway/gatewayResponseDefault2XX.yaml)}
    GatewayResponseDefault4XX: ${file(./resources/infra/api-gateway/gatewayResponseDefault4XX.yaml)}
    ApiGatewayRestApi: ${file(./resources/infra/api-gateway/apiGateway.yaml)}
    bucket: ${file(./resources/infra/bucket/${opt:stage, 'dev'}.yaml)}
